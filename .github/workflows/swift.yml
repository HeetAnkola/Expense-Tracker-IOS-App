# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test iOS Project
    runs-on: macos-latest  # Use the latest macOS runner

    steps:
    # Step 1: Checkout repository
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Debugging step - List directory structure
    - name: List directory structure
      run: |
        echo "Listing the root directory contents:"
        ls -l
        echo "Listing all files recursively:"
        ls -R

    # Step 3: Debugging step - Check if .xcodeproj exists
    - name: Check for .xcodeproj file
      run: |
        echo "Checking if .xcodeproj exists"
        if [ -f "Expense Tracker.xcodeproj" ]; then
          echo "Found .xcodeproj file"
        else
          echo "No .xcodeproj file found"
          exit 1
        fi

    # Step 4: Install dependencies (CocoaPods, Carthage, SwiftPM, etc.)
    - name: Install dependencies
      run: |
        if [ -f Podfile ]; then
          echo "Installing CocoaPods dependencies"
          sudo gem install cocoapods
          pod install
        fi
        # Add other dependency managers (like Carthage or SwiftPM) if needed.

    # Step 5: Build the project using .xcodeproj
    - name: Build the iOS project
      run: |
        # Debugging: Show the current directory
        echo "Current directory:"
        pwd
        echo "Contents of the current directory:"
        ls -l
        
        # Build with .xcodeproj
        echo "Building with .xcodeproj"
        xcodebuild -project "Expense Tracker.xcodeproj" -scheme "Expense Tracker" -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14' clean build

    # Step 6: Run tests
    - name: Run tests
      run: |
        # Debugging: Check if the test files are present
        echo "Running tests..."
        xcodebuild test -project "Expense Tracker.xcodeproj" -scheme "Expense Tracker" -destination 'platform=iOS Simulator,name=iPhone 14'

    # Step 7: Upload test results (optional)
    - name: Upload test results
      if: success() || failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: build/logs
